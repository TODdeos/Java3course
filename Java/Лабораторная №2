// Базовый класс (родительский класс)
class Animal {
    private String name;

    public Animal(String name) {
        this.name = name;
    }

    public void eat() {
        System.out.println(name + " is eating.");
    }

    public void sleep() {
        System.out.println(name + " is sleeping.");
    }
}

// Подкласс (дочерний класс), наследующий от Animal
class Dog extends Animal {
    public Dog(String name) {
        // Вызов конструктора родительского класса с использованием super
        super(name);
    }

    // Дополнительные методы или переопределение методов по необходимости
    public void bark() {
        System.out.println("Woof! Woof!");
    }
}

// Подкласс (дочерний класс), наследующий от Animal
class Cat extends Animal {
    public Cat(String name) {
        // Вызов конструктора родительского класса с использованием super
        super(name);
    }

    // Дополнительные методы или переопределение методов по необходимости
    public void meow() {
        System.out.println("Meow! Meow!");
    }
}

public class Main {
    public static void main(String[] args) {
        // Создание объектов классов
        Dog myDog = new Dog("Buddy");
        Cat myCat = new Cat("Whiskers");

        // Использование методов, унаследованных от родительского класса
        myDog.eat();
        myDog.sleep();
        myDog.bark();

        myCat.eat();
        myCat.sleep();
        myCat.meow();
    }
}
В данном примере классы Dog и Cat наследуют от базового класса Animal. 
Это позволяет им использовать методы eat() и sleep(), определенные в классе Animal, 
без необходимости повторного их написания в каждом классе.
Кроме того, каждый из подклассов может иметь свои собственные методы, 
как например bark() для Dog и meow() для Cat.

Преимущества наследования включают повторное использование кода, 
упрощение структуры программы и возможность создания иерархии 
классов для более логической организации кода. 
